[{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/articles/Benchmarks.html","id":"benchmarks","dir":"Articles","previous_headings":"","what":"Benchmarks","title":"Benchmarks","text":"code used run plot benchmarks.","code":"library(RS)  .benchmark <- function(n) {     FooRS <- Class(         \"FooRS\",         a := t_int,         b := t_dbl,         c := t_char     )      FooRSUnval <- Class(         \"FooRSUnval\",         .validate = FALSE,          a := t_int,         b := t_dbl,         c := t_char     )      FooR6 <- R6::R6Class(         \"FooR6\",         public = list(             a = NULL,             b = NULL,             c = NULL,              initialize = function(a, b, c) {                 self$a <- a                 self$b <- b                 self$c <- c             }         )     )      FooRef <- setRefClass(         \"FooRef\",         fields = list(a = \"integer\", b = \"numeric\", c = \"character\"),         where = globalenv()     )      FooS7 <- S7::new_class(         \"FooS7\",         properties = list(             a = S7::class_integer,             b = S7::class_numeric,             c = S7::class_character         )     )      FooS4 <- setClass(         \"FooS4\",         slots = list(             a = \"integer\",             b = \"numeric\",             c = \"character\"         ),         where = globalenv()     )      FooPy <- reticulate::PyClass(         \"FooPy\",         list(             a = NULL,             b = NULL,             c = NULL,             `__init__` = function(self, a, b, c) {                 self$a <- a                 self$b <- b                 self$c <- c                 invisible()             }         )     )      .out <- bench::mark(         \"RS (no validation)\" = FooRSUnval(a = 1L, b = 2.0, c = \"xxx\"),         \"RS\" = FooRS(a = 1L, b = 2.0, c = \"xxx\"),         \"R6\" = FooR6$new(a = 1L, b = 2.0, c = \"xxx\"),         \"S4\" = FooS4(a = 1L, b = 2.0, c = \"xxx\"),         \"S7\" = FooS7(a = 1L, b = 2.0, c = \"xxx\"),         \"reticulate\" = FooPy(a = 1L, b = 2.0, c = \"xxx\"),         \"RefClass\" = FooRef(a = 1L, b = 2.0, c = \"xxx\"),          iterations = n,         check = FALSE     )[, c(1, 3, 4, 5, 6, 8, 9)]      .out$speedup <- sprintf(\"%f\", .out$`itr/sec`[1] / .out$`itr/sec`)     return(.out) } .benchplot <- function(benchmark) {     baseline <- benchmark |>         dplyr::filter(as.character(expression) == \"RS (no validation)\") |>         dplyr::pull(`itr/sec`)      benchmark |>         dplyr::mutate(             expr_chr = as.character(expression),             pkg = factor(expr_chr, levels = expr_chr),             baseline = benchmark |>                 dplyr::mutate(expr_chr = as.character(expression)) |>                 dplyr::filter(expr_chr == \"RS (no validation)\") |>                 dplyr::pull(`itr/sec`),             speedup = baseline / `itr/sec`,             speedup_label = dplyr::if_else(                 !expr_chr %in% c(\"RS\", \"RS (no validation)\"),                 paste0(round(speedup, 0), \"x\"),                 NA_character_             )         ) |>         ggplot2::ggplot() +         ggplot2::aes(x = pkg, y = `itr/sec`, fill = pkg) +         ggplot2::geom_bar(stat = \"identity\") +         ggplot2::geom_text(             ggplot2::aes(label = speedup_label),             vjust = -0.5,             na.rm = TRUE,             size = 6,         ) +         ggplot2::ggtitle(             \"CLASS INITIALISATION: ITERATIONS / SECOND (higher is better)\"         ) +         ggplot2::theme_classic() +         ggplot2::scale_fill_manual(             values = c(                 \"RS (no validation)\" = \"#1E2650\",                 \"RS\" = \"#1E2650\",                 \"R6\" = \"#cacaca\",                 \"S4\" = \"#cacaca\",                 \"S7\" = \"#cacaca\",                 \"RefClass\" = \"#cacaca\",                 \"reticulate\" = \"#cacaca\"             )         ) +         ggplot2::scale_y_continuous(labels = scales::label_number()) +         ggplot2::labs(             x = \"Package\",             y = \"Iterations per second\",             fill = \"Package\"         ) }"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/articles/Dataframes.html","id":"dataframes","dir":"Articles","previous_headings":"","what":"Dataframes","title":"Dataframes","text":"common pattern reading tabular document data source populating class instances . ’re coming Rust may familiar something like serde sort task. RS, fairly easy create multiple class instances table JSON similar source. can simply use !!! operator pass list fields initialising class: makes simple create multiple instances data-frame, example: now list Asset classes ready use. can course thing data source can store R lists, common one might JSON example.","code":"library(RS)  Class(     \"Asset\",      # FIELDS     id       := t_char,     company  := t_char,     type     := t_char,     price    := t_dbl,     quantity := t_int,      # METHODS     value := function(.self) {         .self@price * .self@quantity     },     print := function(.self) {         cat(\"Asset ID:\", .self@id, \"\\n\")         cat(\"Name:\", .self@company, \"\\n\")         cat(\"Type:\", .self@type, \"\\n\")         cat(\"Price:\", .self@price, \"\\n\")         cat(\"Quantity:\", .self@quantity, \"\\n\")         cat(\"Total Value:\", .self@value(), \"\\n\")     } ) fields <- list(     id = \"AAPL\",     company = \"Apple Inc.\",     type = \"Equity\",     price = 150.0,     quantity = 10L )  #asset <- Asset(!!!fields)  #asset@print() df <- data.frame(     id       = c(\"AAPL\", \"GOOGL\", \"AMZN\"),     company  = c(\"Apple Inc.\", \"Alphabet Inc.\", \"Amazon.com Inc.\"),     type     = c(\"Equity\", \"Equity\", \"Equity\"),     price    = c(150.0, 2800.0, 3400.0),     quantity = c(10L, 5L, 2L) )  assets <- purrr::pmap(df, Asset) Asset ID: AAPL Name: Apple Inc. Type: Equity Price: 150 Quantity: 10 Total Value: 1500  Asset ID: GOOGL Name: Alphabet Inc. Type: Equity Price: 2800 Quantity: 5 Total Value: 14000  Asset ID: AMZN Name: Amazon.com Inc. Type: Equity Price: 3400 Quantity: 2 Total Value: 6800"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/articles/Operators.html","id":"operators","dir":"Articles","previous_headings":"","what":"Operators","title":"Operators","text":"brief note use two operators within RS package. @ operator used R access slots S4 S7 classes. decided use operator RS $ pervasive R code, wanted operator help user identify object left-hand side RS class, rather list, R6 class, environment, dataframe, etc. example, see: ’s little ambiguous x . However, see: x can RS class, S4/S7 class also project. hope makes reading code bit easier. := used defining class’ attributes. example: assigned t_int type, x assigned t_cplx type. Like @ operator, primarily readability (.e. differentiate common assignment like x = 1), however, also allows add futher assignment features future.","code":"x$y <- 1 x@y <- 1 Class(     \"Foo\",      a := t_int,     x := t_cplx )"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/articles/Operators.html","id":"slot-operator","dir":"Articles","previous_headings":"","what":"@ - Slot Operator","title":"Operators","text":"@ operator used R access slots S4 S7 classes. decided use operator RS $ pervasive R code, wanted operator help user identify object left-hand side RS class, rather list, R6 class, environment, dataframe, etc. example, see: ’s little ambiguous x . However, see: x can RS class, S4/S7 class also project. hope makes reading code bit easier.","code":"x$y <- 1 x@y <- 1"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/articles/Operators.html","id":"attribute-assignment-operator","dir":"Articles","previous_headings":"","what":":= - Attribute Assignment Operator","title":"Operators","text":":= used defining class’ attributes. example: assigned t_int type, x assigned t_cplx type. Like @ operator, primarily readability (.e. differentiate common assignment like x = 1), however, also allows add futher assignment features future.","code":"Class(     \"Foo\",      a := t_int,     x := t_cplx )"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/articles/Types.html","id":"types","dir":"Articles","previous_headings":"","what":"Types","title":"Types","text":"RS provides number types meant used defining class. initialising class instance, must provide type matches given validator. Note t_any catch-type skips validation single field. pass incorrect value field, get error like: can also turn validation entirely class via: can give slight (~10-20%) performance boost cost type validation.","code":"library(RS)  Class(     \"Foo\",      a := t_any,     b := t_int,     c := t_char,     d := t_dataframe,     e := t_date ) foo <- Foo(     a = raw(1),      b = 1L,      c = \"c\",      d = data.frame(),      e = as.Date(\"2025-01-01\") ) foo <- Foo(     a = raw(1),      b = 1L,      c = \"c\",      d = data.frame(),      e = list()        ## Should be a t_date ) \"Invalid type <'list'> passed for field <'e'>.\" Class(     \"Foo\",      a := t_any,     b := t_int,     c := t_char,     d := t_dataframe,     e := t_date,      .validate = FALSE ## Add this here  )"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amando Z. Maintainer.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Z (2025). RS: Fast classes R. R package version 0.0.0.9000, https://github.com/avhz/RS/.","code":"@Manual{,   title = {RS: Fast classes for R},   author = {Amando Z},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/avhz/RS/}, }"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/index.html","id":"rs---fast-classes-for-r-","dir":"","previous_headings":"","what":"Fast classes for R","title":"Fast classes for R","text":"Contributions welcome! feature request, find bug, feel free open issue PR ✅  RS R package implements classes R. centered around type validation attributes, can confident classes contain right data. Despite cost providing type validation, 700-800% faster next fastest OOP package. name RS combination : R S languages (S R’s predecessor). .rs - file extension used Rust files, TLD Rust websites.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Fast classes for R","text":"following work: installs latest development version RS GitHub. RS yet CRAN, hopefully soon.","code":"pak::pak(\"avhz/RS\") ## or renv::install(\"avhz/RS\") ## or devtools::install_github(\"avhz/RS\")"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fast classes for R","text":"Note fields special objects like t_int, t_char, etc. objects allow attribute type validation. pass incorrect type one fields, get error like: used slot operator @ accessing attributes RS, common $ operator pervasive R code wanted operator made obvious object RS class, rather list, dataframe, environment, R6 class, etc. Note: Inheritance currently supported likely won’t unless overwhelming demand . Instead, composition supported preferred.","code":"library(RS)  Class(     \"Dog\",       # Fields     name  := t_char,     age   := t_int,     breed := t_char,       # Methods     bark := function(.self) cat(.self@name, \"goes woof!\\n\") )   fluffy <- Dog(name = \"Fluffy\", age = 3L, breed = \"Golden Retriever\") fluffy <- Dog(name = 1, age = 3L, breed = \"Golden Retriever\") \"Invalid type <'double'> passed for field <'name'>.\" fluffy@name #> [1] \"Fluffy\" fluffy@age #> [1] 3 fluffy@breed #> [1] \"Golden Retriever\" fluffy@bark() #> Fluffy goes woof!"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/index.html","id":"benchmarks","dir":"","previous_headings":"","what":"Benchmarks","title":"Fast classes for R","text":"See Benchmarks vignette benchmark code. following shows iterations per second class instances number R OOP libraries. can see RS offers least 7-8x performance gain offerings.  Note #1: libraries may provide features currently mature/complete offerings, particular R6. Note #2: creating Python class instances via reticulate inside R interpreter significantly slower directly Python. Python classes still much, much faster RS package (~30-40x faster last checked).","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/Class.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new RS class. — Class","title":"Define a new RS class. — Class","text":"Create new ClassDefinition R.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/Class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new RS class. — Class","text":"","code":"Class(.classname, ..., .validate = TRUE)"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/Class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new RS class. — Class","text":".classname name class. ... fields methods class definition. .validate Whether validate class attributes. Note: setting FALSE gives slight performance boost.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/Class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a new RS class. — Class","text":"Class function creates new ClassDefinition R. allows define fields methods class.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/RS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"RS: Fast classes for R — RS-package","title":"RS: Fast classes for R — RS-package","text":"Fast classes R, written Rust.","code":""},{"path":[]},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/RSTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"RS types for validation of RS class attributes. — RSTypes","title":"RS types for validation of RS class attributes. — RSTypes","text":"Supported types RS classes include: t_any t_date, t_dates t_int, t_ints t_dbl, t_dbls t_num, t_nums t_char, t_chars t_bool, t_bools t_cplx, t_cplxs t_raw, t_raws t_factor, t_factors t_list t_array t_vector t_matrix t_dataframe t_hashtab t_environment t_pairlist t_func t_expr t_call t_sym t_lang t_obj t_prim Note scalar vector versions types, t_int t_ints. former allows single scalar integer, latter matches vector integers. also catch-type t_any, match value, useful cases want allow type value field, still validating fields, .e. .validation = TRUE (default).","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/RSTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RS types for validation of RS class attributes. — RSTypes","text":"","code":"t_any()  t_date()  t_dates()  t_int()  t_ints()  t_dbl()  t_dbls()  t_num()  t_nums()  t_char()  t_chars()  t_bool()  t_bools()  t_cplx()  t_cplxs()  t_raw()  t_raws()  t_factor()  t_factors()  t_list()  t_array()  t_vector()  t_matrix()  t_dataframe()  t_hashtab()  t_environment()  t_pairlist()  t_func()  t_expr()  t_call()  t_sym()  t_lang()  t_obj()  t_prim()"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/RSTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RS types for validation of RS class attributes. — RSTypes","text":"new type object can used validation RS classes.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/RSTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RS types for validation of RS class attributes. — RSTypes","text":"","code":"t_any #> function ()  #> .Call(wrap__ClassType__from_str, name, PACKAGE = \"RS\") #> <bytecode: 0x55e76c4d7a88> #> <environment: 0x55e76c4d4ba8> #> attr(,\"class\") #> [1] \"TypeGenerator\" \"function\"      \"RS\"            t_date #> function ()  #> .Call(wrap__ClassType__from_str, name, PACKAGE = \"RS\") #> <bytecode: 0x55e76c518d20> #> <environment: 0x55e76c515e40> #> attr(,\"class\") #> [1] \"TypeGenerator\" \"function\"      \"RS\"            t_ints #> function ()  #> .Call(wrap__ClassType__from_str, name, PACKAGE = \"RS\") #> <bytecode: 0x55e76c54c4f0> #> <environment: 0x55e76c54d440> #> attr(,\"class\") #> [1] \"TypeGenerator\" \"function\"      \"RS\"            t_dataframe #> function ()  #> .Call(wrap__ClassType__from_str, name, PACKAGE = \"RS\") #> <bytecode: 0x55e76c579c30> #> <environment: 0x55e76c576d50> #> attr(,\"class\") #> [1] \"TypeGenerator\" \"function\"      \"RS\""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/is_private.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an attribute is private. — is_private","title":"Check if an attribute is private. — is_private","text":"Check attribute private.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/is_private.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an attribute is private. — is_private","text":"","code":"is_private(attribute)"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/is_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a method is static. — is_static","title":"Check if a method is static. — is_static","text":"Check method static.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/is_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a method is static. — is_static","text":"","code":"is_static(attribute)"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/private.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a method or attribute as private. — private","title":"Declare a method or attribute as private. — private","text":"Declare method attribute private.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/private.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a method or attribute as private. — private","text":"","code":"private(.attr)"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/private.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a method or attribute as private. — private","text":".attr function attribute declared private.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/private.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declare a method or attribute as private. — private","text":"private function used declare method attribute private class definition. Private methods attributes accessible outside class.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/private_.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorator to mark a class attribute as private. — private_","title":"Decorator to mark a class attribute as private. — private_","text":"private attribute accessible outside class. used encapsulate data modified directly.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/private_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorator to mark a class attribute as private. — private_","text":"","code":"private_(attribute)"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/static.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a method is a static method. — static","title":"Declare a method is a static method. — static","text":"Declare method static method.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a method is a static method. — static","text":"","code":"static(.attr)"},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a method is a static method. — static","text":".attr function declared static method.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/static.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declare a method is a static method. — static","text":"static function used declare method static method class definition. Static methods refer self, .e. first argument instance class.","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/static_.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorator to mark a method as static. — static_","title":"Decorator to mark a method as static. — static_","text":"static method method belongs class , rather instances class. can called without creating instance class, access instance-specific data (self).","code":""},{"path":"https://github.com/avhz/RS/, https://avhz.github.io/RS/reference/static_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorator to mark a method as static. — static_","text":"","code":"static_(attribute)"}]
